/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.adip.interfazsai;

import com.adip.interfazsai.clientRest.RequestUtil;
import com.adip.interfazsai.models.Boleta;
import com.adip.interfazsai.models.Lote;
import com.adip.interfazsai.models.Token;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.ws.rs.core.Response;
import org.apache.storm.shade.org.apache.commons.codec.binary.Base64;

/**
 *
 * @author enrique
 */
public class Home extends javax.swing.JFrame {
    Token webToken = null;
    String path = "/home/enrique/Documentos/projects/freelance/InterfazSAI/files";

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
    }
    
    public Home(Token token){
        this.webToken = token;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loteField = new javax.swing.JTextField();
        numDocsField = new javax.swing.JTextField();
        sendDocsBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        loteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loteFieldActionPerformed(evt);
            }
        });

        numDocsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numDocsFieldActionPerformed(evt);
            }
        });

        sendDocsBtn.setBackground(new java.awt.Color(72, 168, 62));
        sendDocsBtn.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        sendDocsBtn.setForeground(new java.awt.Color(255, 255, 255));
        sendDocsBtn.setText("Enviar Documentos");
        sendDocsBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sendDocsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendDocsBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        jLabel1.setText("Nombre del lote");

        jLabel2.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        jLabel2.setText("# de documentos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(205, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(loteField)
                    .addComponent(numDocsField)
                    .addComponent(sendDocsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
                .addGap(176, 176, 176))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loteField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(numDocsField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendDocsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loteFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loteFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loteFieldActionPerformed

    private void numDocsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numDocsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numDocsFieldActionPerformed

    private void sendDocsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendDocsBtnActionPerformed
        // TODO add your handling code here:
        String nameLote = loteField.getText();
        String numDocsString = numDocsField.getText();
        if (!numDocsString.equals("") && !nameLote.equals("")) {
            int numDocs = Integer.parseInt(numDocsString);
            File folder = new File(this.path);
            String[] nameFiles = folder.list();
            List<String> nameFilesList = Arrays.asList(nameFiles);
            Collections.sort(nameFilesList);
            String error = "";
            if (nameFilesList.size() == numDocs * 2) {
                String webToken = "Bearer " + this.webToken.getAccess();
                String dateEmision = "2019-12-09";
                Lote lote = new Lote(nameLote, dateEmision, 1);
                RequestUtil clientWebLote = new RequestUtil();
                Response responseLote = clientWebLote.crearLote(lote, webToken);
                Boolean loteCreado = false;
                switch (responseLote.getStatus()){
                    case 400:
                        error = responseLote.readEntity(String.class);
                        System.out.println("error 400" + error);
                        break;
                    case 401:
                        error = responseLote.readEntity(String.class);
                        System.out.println("error 401" + error);
                        break;
                    case 201:
                        Lote loteResponse = responseLote.readEntity(Lote.class);
                        System.out.println("Se agrego correctamente el lote: " + loteResponse.getId());
                        loteCreado = true;
                        break;
                }
                if (loteCreado) {
                    Boolean sendFiles = true;
                    error = "";
                    for (int i = 0; i < nameFilesList.size() - 1; i += 2) {
                        RequestUtil clientWeb = new RequestUtil(true);
                        int j = i + 1;
                        File boletaAnverso = new File(folder.getAbsolutePath() + "//" + nameFilesList.get(i));
                        File boletaReverso = new File(folder.getAbsolutePath() + "//" + nameFilesList.get(j));
                        Boleta boleta = new Boleta(boletaAnverso, boletaReverso);
                        Response response = clientWeb.crearBoletas(boleta, webToken);
                        switch (response.getStatus()){
                            case 400:
                                error = response.readEntity(String.class);
                                System.out.println("error 400" + error);
                                sendFiles = false;
                                break;
                            case 401:
                                error = response.readEntity(String.class);
                                System.out.println("error 401" + error);
                                sendFiles = false;
                                break;
                            case 201:
                                boletaAnverso.delete();
                                boletaReverso.delete();
                                break;
                        }
                        if (!sendFiles) {
                            break;
                        }
                    }
                    if (sendFiles) {
                        JOptionPane.showMessageDialog(this, "Se subieron correctamente los archivos");
                    } else {
                        // Hubo algun error en la carga de documentos
                        JOptionPane.showMessageDialog(this, error);
                    }
                } else {
                    // No se cre correctamente el lote
                    JOptionPane.showMessageDialog(this, error);
                }
            } else {
                if (nameFilesList.size() != numDocs * 2) {
                    JOptionPane.showMessageDialog(this, "No se escanearon completamente las boletas, favor de reintentar");
                }
            }
        } else { 
            // Validaciones de formularios
            if (nameLote.equals("")) {
                JOptionPane.showMessageDialog(this, "Favor de ingresar el nombre del lote");
            } else {
                if (numDocsString.equals("")) {
                    JOptionPane.showMessageDialog(this, "Favor de ingresar el numero de documentos que se van a escanear");
                }
            }
        }
    }//GEN-LAST:event_sendDocsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField loteField;
    private javax.swing.JTextField numDocsField;
    private javax.swing.JButton sendDocsBtn;
    // End of variables declaration//GEN-END:variables
}
